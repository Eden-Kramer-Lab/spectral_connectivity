name: PR Test

on:
  push:
    branches: [ master ]   # add 'main' if you use it
  pull_request:
    branches: [ master ]
  workflow_dispatch:

# Auto-cancel in-progress runs for same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Least-privilege by default
permissions:
  contents: read

jobs:
  run-tests:
    name: Tests (${{ matrix.os }} â€¢ py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ] # add macos-latest, windows-latest if desired
        python: [ "3.9" ]     # expand to ["3.9","3.10","3.11"] when ready

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Miniforge (no env solve yet)
      - name: Set up Conda (Miniforge)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          use-mamba: true
          auto-update-conda: false
          auto-activate-base: false
          python-version: ${{ matrix.python }}
          channel-priority: strict

      # Cache conda pkgs BEFORE solving the env
      - name: Cache conda pkgs
        uses: actions/cache@v4
        with:
          path: ~/.conda/pkgs
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      # Create/Update the project environment from environment.yml
      - name: Create env from environment.yml
        shell: bash -l {0}
        run: |
          mamba env remove -n spectral_connectivity -y || true
          mamba env create -n spectral_connectivity -f environment.yml
          conda activate spectral_connectivity
          python -V
          conda list

      - name: Install package (editable)
        shell: bash -l {0}
        run: |
          conda activate spectral_connectivity
          pip install --upgrade pip
          pip install -e .

      - name: Run tests with coverage (lcov)
        shell: bash -l {0}
        run: |
          conda activate spectral_connectivity
          pytest --cov=spectral_connectivity tests/ --cov-report=lcov:coverage.lcov -v

      # Upload coverage file as an artifact (useful for debugging)
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python }}
          path: coverage.lcov
          if-no-files-found: warn

      # Coveralls (v2). Assumes coverage.lcov exists.
      - name: Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage.lcov
          coverage-reporter-version: v0.6.15  # Pin to working version (v0.6.16+ has 500 error bug)

      # Execute example/tutorial notebooks to ensure they run end-to-end
      - name: Execute notebooks
        shell: bash -l {0}
        env:
          NB_KERNEL: python3
        run: |
          conda activate spectral_connectivity
          for nb in \
            examples/Tutorial_On_Simulated_Examples.ipynb \
            examples/Tutorial_Using_Paper_Examples.ipynb
          do
            echo "Executing $nb"
            jupyter nbconvert \
              --to notebook \
              --inplace \
              --ExecutePreprocessor.kernel_name="$NB_KERNEL" \
              --ExecutePreprocessor.timeout=1800 \
              --execute "$nb"
          done

      - name: Upload executed notebooks
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: executed-notebooks-${{ matrix.os }}-py${{ matrix.python }}
          path: examples/*.ipynb
          if-no-files-found: warn
